#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || exit

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

WRAPPER_JAR_PATH="$APP_HOME/gradle/wrapper/gradle-wrapper.jar"

ensure_wrapper_jar() {
    if [ -f "$WRAPPER_JAR_PATH" ]; then
        return
    fi

    distribution_url=$(sed -n 's/^distributionUrl=//p' "$APP_HOME/gradle/wrapper/gradle-wrapper.properties" | tail -n 1)
    distribution_url=$(printf '%s\n' "$distribution_url" | sed 's#\\:#:#g')
    if [ -z "$distribution_url" ]; then
        die "Could not determine Gradle distribution URL from gradle-wrapper.properties."
    fi

    distribution_filename=${distribution_url##*/}
    case "$distribution_filename" in
        gradle-*-bin.zip)
            distribution_version=${distribution_filename#gradle-}
            distribution_version=${distribution_version%-bin.zip}
            ;;
        gradle-*-all.zip)
            distribution_version=${distribution_filename#gradle-}
            distribution_version=${distribution_version%-all.zip}
            ;;
        *)
            die "Unable to extract Gradle version from distribution URL '$distribution_url'."
            ;;
    esac

    jar_url_default="https://services.gradle.org/distributions/gradle-${distribution_version}-wrapper.jar"
    jar_url=${GRADLE_WRAPPER_JAR_URL:-$jar_url_default}
    jar_file=${GRADLE_WRAPPER_JAR_FILE:-}
    distribution_override=${GRADLE_WRAPPER_DISTRIBUTION_URL:-$distribution_url}

    downloader=""
    if command -v curl >/dev/null 2>&1; then
        downloader="curl -fLo"
    elif command -v wget >/dev/null 2>&1; then
        downloader="wget -O"
    fi

    if [ -z "$downloader" ]; then
        die "Neither curl nor wget is available to download the Gradle wrapper jar."
    fi

    if [ -n "$jar_file" ]; then
        if [ ! -f "$jar_file" ]; then
            die "GRADLE_WRAPPER_JAR_FILE is set to '$jar_file' but the file does not exist."
        fi
        mkdir -p "$(dirname "$WRAPPER_JAR_PATH")" || die "Could not create Gradle wrapper directory."
        cp "$jar_file" "$WRAPPER_JAR_PATH" || die "Could not copy Gradle wrapper jar from '$jar_file'."
        return
    fi

    temp_file=$(mktemp "${TMPDIR:-/tmp}/gradle-wrapper-jar.XXXXXX") || die "Could not create temporary file for Gradle wrapper jar download."
    dist_tmp=""
    cleanup() {
        rm -f "$temp_file"
        if [ -n "$dist_tmp" ]; then
            rm -f "$dist_tmp"
        fi
    }
    trap cleanup EXIT

    if ! $downloader "$temp_file" "$jar_url"; then
        warn "Failed to obtain Gradle wrapper jar from $jar_url. Falling back to the distribution archive at $distribution_override."
        dist_tmp=$(mktemp "${TMPDIR:-/tmp}/gradle-distribution.XXXXXX") || die "Could not create temporary file for Gradle distribution download."
        if ! $downloader "$dist_tmp" "$distribution_override"; then
            die "Failed to download Gradle distribution from $distribution_override. Provide reachable resources via GRADLE_WRAPPER_JAR_URL, GRADLE_WRAPPER_JAR_FILE, or GRADLE_WRAPPER_DISTRIBUTION_URL."
        fi

        if command -v python3 >/dev/null 2>&1; then
            python_code=$(cat <<'PY'
import io
import sys
import zipfile
import fnmatch

archive, destination = sys.argv[1], sys.argv[2]

def extract_from_zip(zip_file, pattern, dest):
    for name in zip_file.namelist():
        if fnmatch.fnmatch(name, pattern):
            with zip_file.open(name) as src, open(dest, 'wb') as dst:
                dst.write(src.read())
            return True
    return False

with zipfile.ZipFile(archive) as zf:
    for name in zf.namelist():
        if fnmatch.fnmatch(name, 'gradle-*/lib/plugins/gradle-wrapper-main-*.jar'):
            nested_bytes = zf.read(name)
            with zipfile.ZipFile(io.BytesIO(nested_bytes)) as nested:
                if extract_from_zip(nested, 'gradle-wrapper.jar', destination):
                    break
                raise SystemExit('gradle-wrapper.jar missing inside gradle-wrapper-main archive')
    else:
        for name in zf.namelist():
            if fnmatch.fnmatch(name, 'gradle-*/lib/gradle-wrapper-*.jar') and '-shared-' not in name:
                with zf.open(name) as src, open(destination, 'wb') as dst:
                    dst.write(src.read())
                break
        else:
            raise SystemExit('gradle-wrapper jar not found in distribution')
PY
)
            if ! python3 -c "$python_code" "$dist_tmp" "$temp_file"; then
                die "Failed to extract gradle-wrapper.jar from the distribution archive $distribution_override."
            fi
        elif command -v unzip >/dev/null 2>&1; then
            plugin_tmp=$(mktemp "${TMPDIR:-/tmp}/gradle-wrapper-plugin.XXXXXX") || die "Could not create temporary file for nested gradle-wrapper extraction."
            if unzip -p "$dist_tmp" 'gradle-*/lib/plugins/gradle-wrapper-main-*.jar' > "$plugin_tmp" 2>/dev/null; then
                if ! unzip -p "$plugin_tmp" 'gradle-wrapper.jar' > "$temp_file"; then
                    rm -f "$plugin_tmp"
                    die "Failed to extract gradle-wrapper.jar from the distribution archive $distribution_override."
                fi
                rm -f "$plugin_tmp"
            else
                rm -f "$plugin_tmp"
                if ! unzip -p "$dist_tmp" 'gradle-*/lib/gradle-wrapper-*.jar' > "$temp_file" 2>/dev/null; then
                    die "Failed to extract gradle-wrapper.jar from the distribution archive $distribution_override."
                fi
            fi
        else
            die "python3 or unzip is required to extract gradle-wrapper.jar when direct download fails."
        fi
    fi

    mkdir -p "$(dirname "$WRAPPER_JAR_PATH")" || die "Could not create Gradle wrapper directory."
    mv "$temp_file" "$WRAPPER_JAR_PATH" || die "Could not move Gradle wrapper jar into place."
    trap - EXIT
}

ensure_wrapper_jar

CLASSPATH=$WRAPPER_JAR_PATH


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC3045 
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC3045 
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi

# Collect all arguments for the java command;
#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of
#     shell script including quotes and variable substitutions, so put them in
#     double quotes to make sure that they get re-expanded; and
#   * put everything else in single quotes, so that it's not re-expanded.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"
